{"version":3,"sources":["Components/Header/index.js","Components/Chatbox/index.js","Components/MessageList/index.js","App.js","serviceWorker.js","index.js"],"names":["Header","react_default","a","createElement","API_URL","Chatbox","axiosConfig","headers","Content-Type","url","concat","inputEl","useRef","Fragment","ref","placeholder","rows","cols","onClick","e","preventDefault","postData","id","Math","floor","random","toString","message","current","value","author","created_at","Date","now","axios","post","then","res","console","log","catch","err","MessageList","_useState","useState","_useState2","Object","slicedToArray","messages","setMessages","useEffect","get","response","data","map","index","className","key","App","Components_Header","build_default","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"sOAQeA,EANA,WACb,OACEC,EAAAC,EAAAC,cAAA,oCCFEC,EAAU,yDACD,SAASC,IAEtB,IAAIC,EAAc,CAChBC,QAAS,CACPC,eAAgB,mCAIdC,EAAG,GAAAC,OAAMN,EAAN,UACHO,EAAUC,iBAAO,MAkBvB,OACEX,EAAAC,EAAAC,cAAAF,EAAAC,EAAAW,SAAA,KACEZ,EAAAC,EAAAC,cAAA,YAAUW,IAAKH,EAASI,YAAY,uBAAuBC,KAAK,KAAKC,KAAK,QAC1EhB,EAAAC,EAAAC,cAAA,UAAQe,QApBU,SAASC,GAC7BA,EAAEC,iBACF,IAAIC,EAAW,CACbC,GAAIC,KAAKC,MAAoB,IAAdD,KAAKE,UAAcC,WAClCC,QAAShB,EAAQiB,QAAQC,MACzBC,OAAQ,MACRC,WAAYC,KAAKC,OAEnBC,IAAMC,KAAK1B,EAAKY,EAAUf,GACzB8B,KAAK,SAACC,GACLC,QAAQC,IAAI,sBAAuBF,KAEpCG,MAAM,SAACC,GACNH,QAAQC,IAAI,gBAAiBE,OAO7B,uBC/BArC,EAAU,yDAED,SAASsC,IAAa,IAAAC,EACHC,mBAAS,MADNC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAC5BK,EAD4BH,EAAA,GAClBI,EADkBJ,EAAA,GAUnC,OARAK,oBAAU,WACR,IAAMzC,EAAG,GAAAC,OAAMN,EAAN,UACT8B,IAAMiB,IAAI1C,GAAK2B,KAAK,SAAAgB,GAAQ,OAAIA,EAASC,OACxCjB,KAAK,SAACiB,GACLJ,EAAYI,MAEb,IAGDpD,EAAAC,EAAAC,cAAAF,EAAAC,EAAAW,SAAA,KACEZ,EAAAC,EAAAC,cAAA,8BAEE6C,GAAYA,EAASM,IAAI,SAACzB,EAAO0B,GAC/B,OACEtD,EAAAC,EAAAC,cAAA,OAAKqD,UAAU,MAAMC,IAAKF,GACxBtD,EAAAC,EAAAC,cAAA,OAAKqD,UAAU,WACZ3B,EAAMF,kCCHR+B,mLAXX,OACEzD,EAAAC,EAAAC,cAAA,OAAKqD,UAAU,OACbvD,EAAAC,EAAAC,cAACwD,EAAD,MACA1D,EAAAC,EAAAC,cAACyD,EAAA1D,EAAD,MACAD,EAAAC,EAAAC,cAACE,EAAD,MACAJ,EAAAC,EAAAC,cAACuC,EAAD,cAPUmB,mBCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOnE,EAAAC,EAAAC,cAACkE,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMtC,KAAK,SAAAuC,GACjCA,EAAaC","file":"static/js/main.96ec3d2e.chunk.js","sourcesContent":["import React from 'react';\n\nconst Header = () => {\n  return(\n    <h1>SHALK</h1>\n  )\n}\n\nexport default Header;","import React, {useRef} from 'react';\nimport axios from 'axios';\nconst API_URL = 'https://ib7cm7u21m.execute-api.us-east-1.amazonaws.com';\nexport default function Chatbox(){\n\n  let axiosConfig = {\n    headers: {\n      'Content-Type': 'application/json;charset=UTF-8'\n    }\n  };\n\n  const url = `${API_URL}/test/`;\n  const inputEl = useRef(null);\n  const onButtonClick = function(e){\n    e.preventDefault();\n    var postData = {\n      id: Math.floor(Math.random()*100).toString(),\n      message: inputEl.current.value,\n      author: 'xyz',\n      created_at: Date.now()\n    };\n    axios.post(url, postData, axiosConfig)\n    .then((res) => {\n      console.log(\"RESPONSE RECEIVED: \", res);\n    })\n    .catch((err) => {\n      console.log(\"AXIOS ERROR: \", err);\n    })\n  }\n\n  return(\n    <>\n      <textarea ref={inputEl} placeholder=\"What's on your mind?\" rows=\"10\" cols=\"100\" />\n      <button onClick={onButtonClick}>Submit</button>\n    </>\n  )\n}","import React, {useState, useEffect} from 'react';\nimport axios from 'axios';\nconst API_URL = 'https://ib7cm7u21m.execute-api.us-east-1.amazonaws.com';\n\nexport default function MessageList(){\n  const [messages, setMessages] = useState(null);\n  useEffect(() => {\n    const url = `${API_URL}/test/`;\n    axios.get(url).then(response => response.data)\n    .then((data) => {\n      setMessages(data);\n     })\n  }, []);\n  \n  return(\n    <>\n      <h3>Messages/Queries</h3>\n      {\n        messages && messages.map((value, index) => {\n          return (\n            <div className='row' key={index}>\n              <div className=\"col p-4\">\n                {value.message}\n              </div>\n            </div>\n          )\n        })\n      }\n    </>\n  )\n}","import React, { Component } from 'react';\nimport Header from './Components/Header';\nimport Chatbox from './Components/Chatbox';\nimport MessageList from './Components/MessageList';\nimport Chat from 'react-fancy-component';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Header/>\n        <Chat/>\n        <Chatbox/>\n        <MessageList/>\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './styles/index.scss';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}